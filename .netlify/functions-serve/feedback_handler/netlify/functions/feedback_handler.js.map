{
  "version": 3,
  "sources": ["../../../../../../Users/Boris/Documents/GitHub/tidy-drop-ui/netlify/functions/feedback_handler.js"],
  "sourceRoot": "/var/folders/3v/k117fpg17tj8wys14r2bnxf80000gn/T/tmp-48380-Pgl2Ph3mEBZs",
  "sourcesContent": ["/**\n * DropTidy Feedback Submission Handler\n * \n * This serverless function processes feedback form submissions for the DropTidy web application.\n * It validates input data, logs the feedback, and returns appropriate responses.\n * \n * @typedef {Object} FeedbackRequest\n * @property {string} name - The user's name\n * @property {string} email - The user's email address\n * @property {string} message - The feedback content\n * @property {string} [category] - Optional category of the feedback (bug, feature, question, etc.)\n * \n * @typedef {Object} SuccessResponse\n * @property {boolean} success - Always true for success responses\n * @property {string} message - A success message\n * \n * @typedef {Object} ErrorResponse\n * @property {boolean} success - Always false for error responses\n * @property {string} error - An error message\n */\n\n/**\n * Validates the feedback request data\n * \n * @param {FeedbackRequest} data - The feedback data to validate\n * @returns {string|null} - Returns an error message if validation fails, null otherwise\n */\nfunction validateFeedbackData(data) {\n  if (!data) {\n    return \"No feedback data provided\";\n  }\n\n  if (!data.name || typeof data.name !== 'string' || data.name.trim().length < 2) {\n    return \"Name is required and must be at least 2 characters\";\n  }\n\n  if (!data.email || typeof data.email !== 'string') {\n    return \"Email is required\";\n  }\n\n  // Simple email validation regex\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(data.email)) {\n    return \"Invalid email address format\";\n  }\n\n  if (!data.message || typeof data.message !== 'string' || data.message.trim().length < 10) {\n    return \"Feedback message is required and must be at least 10 characters\";\n  }\n\n  return null;\n}\n\n/**\n * The main handler function for the feedback serverless endpoint\n * \n * @param {Object} event - The Netlify Functions event object\n * @param {Object} context - The Netlify Functions context object\n * @returns {Object} - HTTP response object\n */\nexport const handler = async (event, context) => {\n  // Set CORS headers if needed\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    // TODO: Configure CORS headers for production\n    \"Access-Control-Allow-Origin\": \"*\", // Replace with specific domain in production\n    \"Access-Control-Allow-Headers\": \"Content-Type\",\n    \"Access-Control-Allow-Methods\": \"POST, OPTIONS\"\n  };\n\n  // Handle preflight OPTIONS request\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204, // No content for OPTIONS\n      headers\n    };\n  }\n\n  // Ensure this is a POST request\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({\n        success: false,\n        error: \"Method not allowed. Please use POST.\"\n      })\n    };\n  }\n\n  try {\n    // Parse the request body\n    let data;\n    try {\n      data = JSON.parse(event.body);\n    } catch (e) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({\n          success: false,\n          error: \"Invalid JSON in request body\"\n        })\n      };\n    }\n\n    // Validate the feedback data\n    const validationError = validateFeedbackData(data);\n    if (validationError) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({\n          success: false,\n          error: validationError\n        })\n      };\n    }\n\n    // Log the feedback (for now)\n    console.log(\"Feedback received:\", {\n      name: data.name,\n      email: data.email,\n      message: data.message,\n      category: data.category || \"general\",\n      timestamp: new Date().toISOString()\n    });\n\n    // TODO: Implement email sending\n    /*\n    // Example SendGrid integration (would require sendgrid package)\n    const sendgrid = require('@sendgrid/mail');\n    sendgrid.setApiKey(process.env.SENDGRID_API_KEY);\n    await sendgrid.send({\n      to: 'your-email@example.com',\n      from: 'noreply@droptidy.com',\n      subject: `DropTidy Feedback: ${data.category || 'General'}`,\n      text: `\n        Name: ${data.name}\n        Email: ${data.email}\n        Category: ${data.category || 'General'}\n        Message: ${data.message}\n      `\n    });\n    */\n\n    // TODO: Implement database storage\n    /*\n    // Example Firestore integration (would require firebase-admin package)\n    const admin = require('firebase-admin');\n    if (!admin.apps.length) {\n      admin.initializeApp({\n        credential: admin.credential.cert({\n          projectId: process.env.FIREBASE_PROJECT_ID,\n          clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n          privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\\\n/g, '\\n')\n        })\n      });\n    }\n    \n    const db = admin.firestore();\n    await db.collection('feedback').add({\n      name: data.name,\n      email: data.email,\n      message: data.message,\n      category: data.category || 'general',\n      timestamp: admin.firestore.FieldValue.serverTimestamp()\n    });\n    */\n\n    // TODO: Implement rate limiting\n    /*\n    // This would typically be implemented using Redis or similar service\n    // Example pseudocode:\n    const ipAddress = event.headers['client-ip'];\n    const currentCount = await getSubmissionCount(ipAddress);\n    if (currentCount > RATE_LIMIT) {\n      return {\n        statusCode: 429,\n        headers,\n        body: JSON.stringify({\n          success: false,\n          error: \"Too many requests. Please try again later.\"\n        })\n      };\n    }\n    await incrementSubmissionCount(ipAddress);\n    */\n\n    // Return success response\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        success: true,\n        message: \"Thank you for your feedback! We appreciate your input.\"\n      })\n    };\n  } catch (error) {\n    // Log the error for debugging\n    console.error(\"Error processing feedback:\", error);\n\n    // Return error response\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        success: false,\n        error: \"An unexpected error occurred while processing your feedback.\"\n      })\n    };\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA,SAAS,qBAAqB,MAAM;AAClC,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,KAAK,QAAQ,OAAO,KAAK,SAAS,YAAY,KAAK,KAAK,KAAK,EAAE,SAAS,GAAG;AAC9E,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,KAAK,SAAS,OAAO,KAAK,UAAU,UAAU;AACjD,WAAO;AAAA,EACT;AAGA,QAAM,aAAa;AACnB,MAAI,CAAC,WAAW,KAAK,KAAK,KAAK,GAAG;AAChC,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,KAAK,WAAW,OAAO,KAAK,YAAY,YAAY,KAAK,QAAQ,KAAK,EAAE,SAAS,IAAI;AACxF,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AASO,IAAM,UAAU,OAAO,OAAO,YAAY;AAE/C,QAAM,UAAU;AAAA,IACd,gBAAgB;AAAA;AAAA,IAEhB,+BAA+B;AAAA;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAGA,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AAEA,MAAI;AAEF,QAAI;AACJ,QAAI;AACF,aAAO,KAAK,MAAM,MAAM,IAAI;AAAA,IAC9B,SAAS,GAAG;AACV,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAGA,UAAM,kBAAkB,qBAAqB,IAAI;AACjD,QAAI,iBAAiB;AACnB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAGA,YAAQ,IAAI,sBAAsB;AAAA,MAChC,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,SAAS,KAAK;AAAA,MACd,UAAU,KAAK,YAAY;AAAA,MAC3B,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC,CAAC;AAgED,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AAEd,YAAQ,MAAM,8BAA8B,KAAK;AAGjD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
